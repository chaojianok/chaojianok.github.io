<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chaojianok</title>
  
  <subtitle>Chaojianok&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chaojianok.github.io/"/>
  <updated>2019-05-20T09:05:45.255Z</updated>
  <id>https://chaojianok.github.io/</id>
  
  <author>
    <name>Chaojian Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flink本地环境搭建和创建Flink应用</title>
    <link href="https://chaojianok.github.io/Flink%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%88%9B%E5%BB%BAFlink%E5%BA%94%E7%94%A8/"/>
    <id>https://chaojianok.github.io/Flink本地环境搭建和创建Flink应用/</id>
    <published>2019-05-20T07:12:21.000Z</published>
    <updated>2019-05-20T09:05:45.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇介绍一下Flink本地环境搭建和创建Flink应用。</p></blockquote><h2 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h2><p>Flink可以在Linux、Mac OS X和Windows上运行，要求安装Java 8.x。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">java version "1.8.0_161"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br></pre></td></tr></table></figure></p><h4 id="下载并启动Flink"><a href="#下载并启动Flink" class="headerlink" title="下载并启动Flink"></a>下载并启动Flink</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>从官网下载页面 http://flink.apache.org/downloads.html 下载Flink</span><br><span class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.8.0/flink-1.8.0-bin-scala_2.11.tgz</span><br><span class="line">tar xzf flink-1.8.0-bin-scala_2.11.tgz</span><br><span class="line">cd flink-1.8.0</span><br><span class="line"><span class="meta">#</span>启动本地Flink群集</span><br><span class="line">./bin/start-cluster.sh</span><br><span class="line"><span class="meta">#</span>停止本地Flink群集</span><br><span class="line"><span class="meta">#</span>./bin/stop-cluster.sh</span><br></pre></td></tr></table></figure><p>启动成功后可以打开<code>http://127.0.0.1:8081</code>看到Flink的web UI，如下图所示。  </p><p><img src="/images/flink-dashboard-overview.png" alt="Flink web UI" title="Flink web UI">  </p><p><em>本地安装也可以通过Flink源码构建的方式，具体操作可以参考<a href="https://www.toutiao.com/i6685975180734366220/" target="_blank" rel="noopener">Flink源码分析-源码构建</a>。</em>  </p><h4 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h4><p>使用<code>nc</code>命令监听指定端口。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nc -l 9002</span><br><span class="line"><span class="meta">#</span>然后随便输入点东西，比如像下面这样</span><br><span class="line"><span class="meta">#</span>这些东西在提交SocketWindowWordCount Job之前或之后输入都是可以的</span><br><span class="line">hello world</span><br><span class="line">word count</span><br><span class="line">hi</span><br><span class="line">flink</span><br><span class="line">ha ha</span><br></pre></td></tr></table></figure></p><p>运行Flink测试example，这里用Flink WordCount Job来测试一下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在源码目录下执行，指定9002端口，这个端口要和刚刚nc命令监听的端口一致</span><br><span class="line">./build-target/bin/flink run ./build-target/examples/streaming/SocketWindowWordCount.jar --port 9002</span><br></pre></td></tr></table></figure></p><p>查看SocketWindowWordCount Job的输出。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在源码目录下执行</span><br><span class="line">tail -100f ./build-target/log/flink-*-taskexecutor-0-*.out</span><br><span class="line"><span class="meta">#</span>执行后输出如下</span><br><span class="line">hello : 1</span><br><span class="line">world : 1</span><br><span class="line">word : 1</span><br><span class="line">count : 1</span><br><span class="line">hi : 1</span><br><span class="line">flink : 1</span><br><span class="line">ha : 2</span><br></pre></td></tr></table></figure></p><p>也可以在Flink web UI里查看输出，如下图所示。  </p><p><img src="/images/taskmanager-stdout.png" alt="Task Manager Output" title="Task Manager Output">  </p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>Flink可以使用Maven和Gradle来构建，这里只介绍使用Maven构建，要求使用Maven 3.x和Java 8.x。</p><ol><li>使用Maven创建<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>使用Maven创建</span><br><span class="line">mvn archetype:generate                              \</span><br><span class="line">  -DarchetypeGroupId=org.apache.flink               \</span><br><span class="line">  -DarchetypeArtifactId=flink-quickstart-java       \</span><br><span class="line">  -DarchetypeVersion=1.8.0                          \</span><br><span class="line">  -DgroupId=flink-demo                              \</span><br><span class="line">  -DartifactId=flink-demo                           \</span><br><span class="line">  -Dversion=0.1                                     \</span><br><span class="line">  -Dpackage=myflink                                 \</span><br><span class="line">  -DinteractiveMode=false</span><br></pre></td></tr></table></figure></li></ol><p>如果没有指定<code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>package</code>，在创建的过程中会提示定义这几个参数的值并确认。</p><ol start="2"><li><p>使用官方提供的快速入门脚本创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>使用官方提供的快速入门脚本创建</span><br><span class="line">curl https://flink.apache.org/q/quickstart.sh | bash -s 1.8.0</span><br></pre></td></tr></table></figure></li><li><p>使用IntelliJ IDEA等集成开发环境新建</p></li></ol><p>创建好的项目结构如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree myflink/</span><br><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── myflink</span><br><span class="line">        │       ├── BatchJob.java</span><br><span class="line">        │       └── StreamingJob.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── log4j.properties</span><br></pre></td></tr></table></figure></p><p>接下来就可以开始开心愉快的coding啦^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇介绍一下Flink本地环境搭建和创建Flink应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;本地安装&quot;&gt;&lt;a href=&quot;#本地安装&quot; class=&quot;headerlink&quot; title=&quot;本地安装&quot;&gt;&lt;/a&gt;本地安装&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="Flink" scheme="https://chaojianok.github.io/categories/Flink/"/>
    
    
      <category term="大数据" scheme="https://chaojianok.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Flink" scheme="https://chaojianok.github.io/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch源码分析 - 源码构建</title>
    <link href="https://chaojianok.github.io/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BA/"/>
    <id>https://chaojianok.github.io/Elasticsearch源码分析-源码构建/</id>
    <published>2019-04-30T07:38:40.000Z</published>
    <updated>2019-04-30T07:39:03.235Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍一下如何从源码构建Elasticsearch，构建Elasticsearch源码是学习和研究Elasticsearch源码的基础，有助于更好的了解Elasticsearch。  </p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><table><thead><tr><th>环境/软件</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>OS</td><td>Ubuntu 14.04 LTS</td><td></td></tr><tr><td>Gradle</td><td>5.4</td><td></td></tr><tr><td>Java</td><td>9.0.4+11</td><td>Oracle Corporation 9.0.4 [OpenJDK 64-Bit Server VM 9.0.4+11]</td></tr><tr><td>Elasticsearch</td><td>6.2</td></tr></tbody></table><h4 id="从源码构建Elasticsearch需要注意下面几个问题："><a href="#从源码构建Elasticsearch需要注意下面几个问题：" class="headerlink" title="从源码构建Elasticsearch需要注意下面几个问题："></a>从源码构建Elasticsearch需要注意下面几个问题：</h4><p>1、从源码构建Elasticsearch需要使用<a href="https://gradle.org" target="_blank" rel="noopener">Gradle</a>，因此需要确认下是否安装了gradle，可以参考<a href="https://gradle.org/install/" target="_blank" rel="noopener">官网安装文档</a>安装，安装步骤如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/gradle</span><br><span class="line">unzip -d /opt/gradle ./下载/gradle-5.4-bin.zip</span><br><span class="line">ls /opt/gradle/gradle-5.4</span><br><span class="line"><span class="meta">#</span>添加环境变量</span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="meta">#</span>在 ~/.bashrc 文件下面加上这句</span><br><span class="line">export PATH=$PATH:/opt/gradle/gradle-5.4/bin</span><br><span class="line"><span class="meta">#</span>使新增的环境变量即时生效</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta">#</span>检查 gradle 是否安装配置成功</span><br><span class="line">gradle -v</span><br></pre></td></tr></table></figure></p><p>2、Elasticsearch编译和运行时所要求的JDK版本是不一样的，以V6.2版本为例，Runtime要求最低JDK8，Compile要求最低JDK9。不同版本的Elasticsearch应该如何确定所需JDK运行时和编译的版本呢？可以在Elasticsearch的源码里找到，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Elasticsearch &lt;= v6.3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//代码文件位置：buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> JavaVersion minimumRuntimeVersion = JavaVersion.VERSION_1_8</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> JavaVersion minimumCompilerVersion = JavaVersion.VERSION_1_9</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Elasticsearch &gt;= v6.4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//代码文件位置：buildSrc/src/main/groovy/org/elasticsearch/gradle/BuildPlugin.groovy</span></span><br><span class="line"><span class="comment">//这段代码对应的配置文件分别是下面这两个：</span></span><br><span class="line"><span class="comment">//buildSrc/src/main/resources/minimumCompilerVersion</span></span><br><span class="line"><span class="comment">//buildSrc/src/main/resources/minimumRuntimeVersion</span></span><br><span class="line">JavaVersion minimumRuntimeVersion = JavaVersion.toVersion(</span><br><span class="line">        BuildPlugin.class.getClassLoader().getResourceAsStream(<span class="string">"minimumRuntimeVersion"</span>).text.trim()</span><br><span class="line">)</span><br><span class="line">JavaVersion minimumCompilerVersion = JavaVersion.toVersion(</span><br><span class="line">        BuildPlugin.class.getClassLoader().getResourceAsStream(<span class="string">"minimumCompilerVersion"</span>).text.trim()</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>3、在终端执行构建操作前建议把终端改为bash，不然可能会有点问题。  </p><h4 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h4><p>具体步骤如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>下载源码</span><br><span class="line">git clone https://github.com/elastic/elasticsearch.git</span><br><span class="line"><span class="meta">#</span>进入源码目录</span><br><span class="line">cd elasticsearch</span><br><span class="line"><span class="meta">#</span>切换到一个稳定分支</span><br><span class="line">git checkout 6.2</span><br><span class="line"><span class="meta">#</span>构建源码</span><br><span class="line">./gradlew assemble</span><br></pre></td></tr></table></figure></p><p>看到下面输出表示构建成功了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD SUCCESSFUL in 10m 15s</span><br><span class="line">505 actionable tasks: 505 executed</span><br></pre></td></tr></table></figure></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>构建成功后就可以启动Elasticsearch了，如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在源码目录下执行</span><br><span class="line">./gradlew run</span><br></pre></td></tr></table></figure></p><p>启动成功后浏览器打开<code>127.0.0.1:9200</code>显示如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"node-0"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"distribution_run"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"E3qa7TIkTTGNP32WizSyXg"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"6.2.5"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"e38fe8a"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2019-04-25T01:27:03.655047Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"7.2.1"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介绍一下如何从源码构建Elasticsearch，构建Elasticsearch源码是学习和研究Elasticsearch源码的基础，有助于更好的了解Elasticsearch。  &lt;/p&gt;
&lt;h4 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="https://chaojianok.github.io/categories/Elasticsearch/"/>
    
    
      <category term="大数据" scheme="https://chaojianok.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Elasticsearch" scheme="https://chaojianok.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Flink源码分析 - 源码构建</title>
    <link href="https://chaojianok.github.io/Flink%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BA/"/>
    <id>https://chaojianok.github.io/Flink源码分析-源码构建/</id>
    <published>2019-04-30T07:36:21.000Z</published>
    <updated>2019-04-30T07:38:06.939Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍一下如何从源码构建Flink，构建Flink源码是学习和研究Flink源码的基础，有助于更好的了解Flink。  </p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><table><thead><tr><th>环境/软件</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>OS</td><td>Ubuntu 14.04 LTS</td><td></td></tr><tr><td>Maven</td><td>3.0.5</td><td></td></tr><tr><td>Java</td><td>1.8.0_161</td><td></td></tr><tr><td>Flink</td><td>1.8</td></tr></tbody></table><p><em>构建前先确认下Maven和JDK版本，至少需要Maven 3.x和Java 8才能构建。</em></p><h4 id="构建源码"><a href="#构建源码" class="headerlink" title="构建源码"></a>构建源码</h4><p>具体步骤如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>先查看下maven和Java版本</span><br><span class="line"><span class="meta">#</span>mvn -v</span><br><span class="line"><span class="meta">#</span>java -version</span><br><span class="line"><span class="meta">#</span>下载源码</span><br><span class="line">git clone https://github.com/apache/flink.git</span><br><span class="line"><span class="meta">#</span>进入源码目录</span><br><span class="line">cd flink</span><br><span class="line"><span class="meta">#</span>切换到一个稳定分支</span><br><span class="line">git checkout release-1.8</span><br><span class="line"><span class="meta">#</span>构建源码</span><br><span class="line"><span class="meta">#</span>-DskipTests跳过执行测试程序</span><br><span class="line"><span class="meta">#</span>-Dfast跳过测试、QA插件和JavaDocs，加快构建速度</span><br><span class="line"><span class="meta">#</span>建议加上-Dfast参数，避免在构建的过程中会遇到各种各样的问题</span><br><span class="line">mvn clean install -DskipTests -Dfast</span><br></pre></td></tr></table></figure></p><p>看到下面输出表示构建成功了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 12:03.086s</span><br><span class="line">[INFO] Finished at: Wed Apr 24 10:38:46 CST 2019</span><br><span class="line">[INFO] Final Memory: 478M/1300M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><p>至此，Flink就构建成功了。  </p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>Flink已经构建好了，这里用 SocketWindowWordCount 的例子来测试一下，看看是否可以正常执行。首先按照下面的步骤启动Flink。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在源码目录下执行</span><br><span class="line">./build-target/bin/start-cluster.sh</span><br><span class="line"><span class="meta">#</span>执行后输出如下，表示启动成功</span><br><span class="line">Starting cluster.</span><br><span class="line">Starting standalonesession daemon on host ubuntu.</span><br><span class="line">Starting taskexecutor daemon on host ubuntu.</span><br></pre></td></tr></table></figure></p><p>启动成功后可以打开<code>http://127.0.0.1:8081</code>看到Flink的web UI，如下图所示。  </p><p><img src="/images/flink-dashboard-overview.png" alt="Flink web UI" title="Flink web UI">  </p><p>使用<code>nc</code>命令监听指定端口。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nc -l 9002</span><br><span class="line"><span class="meta">#</span>然后随便输入点东西，比如像下面这样</span><br><span class="line"><span class="meta">#</span>这些东西在提交 SocketWindowWordCount Job之前或之后输入都是可以的</span><br><span class="line">hello world</span><br><span class="line">word count</span><br><span class="line">hi</span><br><span class="line">flink</span><br><span class="line">ha ha</span><br></pre></td></tr></table></figure></p><p>运行Flink测试example，这里用Flink WordCount Job来测试一下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在源码目录下执行，指定9002端口，这个端口要和刚刚 nc 命令监听的端口一致</span><br><span class="line">./build-target/bin/flink run ./build-target/examples/streaming/SocketWindowWordCount.jar --port 9002</span><br></pre></td></tr></table></figure></p><p>查看SocketWindowWordCount Job的输出。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在源码目录下执行</span><br><span class="line">tail -100f ./build-target/log/flink-*-taskexecutor-0-*.out</span><br><span class="line"><span class="meta">#</span>执行后输出如下</span><br><span class="line">hello : 1</span><br><span class="line">world : 1</span><br><span class="line">word : 1</span><br><span class="line">count : 1</span><br><span class="line">hi : 1</span><br><span class="line">flink : 1</span><br><span class="line">ha : 2</span><br></pre></td></tr></table></figure></p><p>也可以在Flink web UI里查看输出，如下图所示。  </p><p><img src="/images/taskmanager-stdout.png" alt="Task Manager Output" title="Task Manager Output">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介绍一下如何从源码构建Flink，构建Flink源码是学习和研究Flink源码的基础，有助于更好的了解Flink。  &lt;/p&gt;
&lt;h4 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;
      
    
    </summary>
    
      <category term="Flink" scheme="https://chaojianok.github.io/categories/Flink/"/>
    
    
      <category term="大数据" scheme="https://chaojianok.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Flink" scheme="https://chaojianok.github.io/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chaojianok.github.io/hello-world/"/>
    <id>https://chaojianok.github.io/hello-world/</id>
    <published>2019-04-30T07:24:46.295Z</published>
    <updated>2019-04-30T07:24:46.295Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
